package router

// Code generated by "fiberopenapi -spec ./specification.json"; DO NOT EDIT.

import (
	"reflect"
)

type Nullable[T any] struct {
	Value  T
	isNull bool
}

func (n Nullable[T]) IsNull() bool {
	return n.isNull
}

type nullable interface {
	IsNull() bool
}

func IsNull(v any) bool {
	if v == nil {
		return false
	}
	if n, ok := v.(nullable); ok {
		return n.IsNull()
	}
	return false
}

// func Null[T any]() T {
// 	return T{isNull: true}
// }

func IsUndefined(v any) bool {
	if v == nil {
		return true
	}
	rv := reflect.ValueOf(v)
	switch rv.Kind() {
	case reflect.Pointer, reflect.Slice, reflect.Map, reflect.Chan, 
		reflect.Func, reflect.Interface:
		return rv.IsNil()
	}
	return false
}