package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/pb33f/libopenapi"
	v3 "github.com/pb33f/libopenapi/datamodel/high/v3"
)

func GenerateHandlers(spec *libopenapi.DocumentModel[v3.Document], packagePath, outputPath, typeName string) error {
	g := &Generator{}

	// Get the package name and generate file header.
	packageName, err := LoadPackageName(packagePath)
	if err != nil {
		return err
	}
	g.Printf(`package %s

// Code generated by "fiberopenapi %s"; DO NOT EDIT.

import (
	"github.com/gofiber/fiber/v2"
)

`,
		packageName,
		strings.Join(os.Args[1:], " "),
	)

	routes := ExtractRoutes(spec)

	// Generate the Handlers interface.
	g.Printf("type %s interface {\n", typeName)
	for _, route := range routes {
		g.Printf("\t%s(c *fiber.Ctx) error\n", ToPascalCase(route.OperationId))
	}
	g.Printf("}\n\n")

	// Generate AddHandlers function.
	g.Printf("func Add%s(app *fiber.App, h %s) {\n", typeName, typeName)
	for _, route := range routes {
		g.Printf("\tapp.%s(\"%s\", h.%s)\n",
			route.Method,
			route.Path,
			ToPascalCase(route.OperationId))
	}
	g.Printf("}\n")

	// Generate the ValidatedHandlers interface.
	g.Printf("type Validated%s interface {\n", typeName)
	for _, route := range routes {
		// TODO(GIA) Routes should have body, params and query parameters.
		g.Printf("\t%s(c *fiber.Ctx) error\n", ToPascalCase(route.OperationId))
	}
	g.Printf("}\n\n")

	// TODO(GIA) Generate the HandlersWithValidation struct.
	g.Printf("type HandlersWithValidation struct {\n")
	g.Printf("\tValidatedHandlers\n")
	g.Printf("}\n\n")

	for _, route := range routes {
		g.Printf("\tfunc (h *HandlersWithValidation) %s(c *fiber.Ctx) error {\n", ToPascalCase(route.OperationId))
		// TODO(GIA) Validate body, params and query parameters.
		// TODO(GIA) Routes should have body, params and query parameters.
		g.Printf("\t\treturn h.ValidatedHandlers.%s(c)\n", ToPascalCase(route.OperationId))
		g.Printf("\t}\n")
	}
	// Write the generated code back to main.go
	if err := g.WriteFile(outputPath); err != nil {
		return fmt.Errorf("cannot write generated code: %w", err)
	}
	return nil
}
